on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # needed for uploading release assets
      id-token: write # needed for keyless signing with cosign
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v5
      - uses: helm/kind-action@v1
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - run: go test -v ./...
      - run: go build -ldflags '-s -w -X main.version=${{ github.event.release.tag_name }}' -o kubepose-${{ matrix.goos }}-${{ matrix.arch }} -v github.com/middle-management/kubepose/cmd/kubepose
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
      - uses: sigstore/cosign-installer@v3.10.0

      - name: Sign Binary
        run: |
          cosign sign-blob --yes kubepose-${{ matrix.goos }}-${{ matrix.arch }} \
            --output-signature kubepose-${{ matrix.goos }}-${{ matrix.arch }}.sig \
            --output-certificate kubepose-${{ matrix.goos }}-${{ matrix.arch }}.pem

      - uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            Promise.all([
              github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                name: "kubepose-${{ matrix.goos }}-${{ matrix.arch }}",
                data: fs.readFileSync("kubepose-${{ matrix.goos }}-${{ matrix.arch }}")
              }),
              github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                name: "kubepose-${{ matrix.goos }}-${{ matrix.arch }}.sig",
                data: fs.readFileSync("kubepose-${{ matrix.goos }}-${{ matrix.arch }}.sig")
              }),
              github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                name: "kubepose-${{ matrix.goos }}-${{ matrix.arch }}.pem",
                data: fs.readFileSync("kubepose-${{ matrix.goos }}-${{ matrix.arch }}.pem")
              })
            ])
